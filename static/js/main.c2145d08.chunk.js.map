{"version":3,"sources":["App.js","serviceWorker.js","index.js","Calculator.js"],"names":["App","react_default","a","createElement","className","Calculator","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","Calc","props","_this","Object","D_Proj_Calculator_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","D_Proj_Calculator_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","D_Proj_Calculator_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","nums","operator","temp","func","bind","D_Proj_Calculator_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","result","clear","state","wrapper","no","evt","target","indexOf","length","pop","push","value","setState","tst","toString","replace","mine","eval","_this2","react__WEBPACK_IMPORTED_MODULE_6___default","map","number","type","onClick","oper","React"],"mappings":"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","file":"static/js/main.c2145d08.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Calc from './Calculator';\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n\n          \n          <br/>\n          <h2>Here is a Calculator Created totally with RactJS</h2>\n          <h3>Hope That is usefull for you</h3>\n          <Calc />\n          \n          \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\r\nimport './App.css';\r\n\r\nclass Calc extends  React.Component{\r\n constructor(props){\r\n     super(props);\r\n     this.func=this.func.bind(this);\r\n     this.result=this.result.bind(this);\r\n     this.clear = this.clear.bind(this);\r\n     this.state ={\r\n         wrapper : [],\r\n         no : []\r\n     }\r\n\r\n }\r\n nums=['1','2','3','4','5','6','7','8','9','0'];\r\n operator=['+','-','*','/'];\r\n temp=[];\r\n func(evt){\r\n         if(evt.target.className == 'ops'){\r\n             if(this.operator.indexOf(this.state.wrapper[this.state.wrapper.length-1])>-1){\r\n                this.state.wrapper.pop([this.state.wrapper.length-1])\r\n             }\r\n         }\r\n         this.temp.push(evt.target.value);\r\n         this.setState({\r\n            wrapper : this.temp\r\n        })\r\n }\r\n result(){\r\n    if(this.operator.indexOf(this.state.wrapper[this.state.wrapper.length-1])>-1){\r\n        this.state.wrapper.pop([this.state.wrapper.length-1])\r\n     }\r\n    let tst=this.state.wrapper.toString().replace(/,/g,'');\r\n    let mine=eval(tst)\r\n    \r\n    this.setState({\r\n        wrapper : mine\r\n    })\r\n }\r\n\r\n clear(){\r\n    this.temp=[]; \r\n    this.setState({\r\n        wrapper : this.temp\r\n    })\r\n }\r\n\r\n render(){\r\n     return(\r\n        <div className=\"calwrapper\">\r\n         <div className=\"result\">{this.state.wrapper}</div>\r\n         <div className=\"numwrapper\">\r\n          {this.nums.map((number)=>(<input className=\"nums\" value={number} type=\"submit\"  onClick={this.func}/>))}\r\n         </div>\r\n         <div className=\"opswrapper\">\r\n           {this.operator.map((oper)=>(<input className=\"ops\" value={oper} type=\"submit\" onClick={this.func}/>))}\r\n         </div>\r\n         <input type=\"submit\" value=\"Result\" onClick={this.result}/>\r\n         <input type=\"submit\" value=\"Clear\" onClick={this.clear}/>\r\n        </div>\r\n     )\r\n }\r\n}\r\nexport default Calc;"],"sourceRoot":""}